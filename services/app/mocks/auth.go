// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/davidchristie/app/services/app/auth (interfaces: Auth)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/davidchristie/app/services/app/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuth) Authorize(arg0 string) (*auth.AuthorizeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", arg0)
	ret0, _ := ret[0].(*auth.AuthorizeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthMockRecorder) Authorize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuth)(nil).Authorize), arg0)
}

// Callback mocks base method.
func (m *MockAuth) Callback(arg0 context.Context, arg1, arg2, arg3 string) (*auth.CallbackResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*auth.CallbackResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Callback indicates an expected call of Callback.
func (mr *MockAuthMockRecorder) Callback(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockAuth)(nil).Callback), arg0, arg1, arg2, arg3)
}

// Session mocks base method.
func (m *MockAuth) Session(arg0 context.Context, arg1 string) (*auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", arg0, arg1)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Session indicates an expected call of Session.
func (mr *MockAuthMockRecorder) Session(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockAuth)(nil).Session), arg0, arg1)
}
